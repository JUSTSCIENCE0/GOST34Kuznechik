#include <iostream>
#include <windows.h>
#include <ctime>

using namespace std;

BYTE* LTransparent(BYTE* data);
BYTE* XOR(BYTE* A, BYTE* B, UINT8 sz);
BYTE* STransparent(BYTE* data);
void Print(BYTE* data, UINT8 sz);

class KuznechikKey
{
private:
    BYTE** RoundKeys = new BYTE*[10];
    BYTE* K1;
    BYTE* K2;
    INT8 it;
    BYTE* MasterKey;

    void IterConst(UINT8 it)
    {
        BYTE* res = new BYTE[16];
        //generate C
        for (UINT8 i = 0; i < 16; i++)
        {
            res[i] = 0x00;
        }
        res[0] = it;
        res = LTransparent(res);

        //XOR with K1
        res = XOR(res, K1, 16);

        //N
        res = STransparent(res);

        //H
        res = LTransparent(res);

        //Feistel network
        res = XOR(res, K2, 16);
        K2 = K1;
        K1 = res;
    }

public:
    KuznechikKey(BYTE* Key)
    {
        it = -1;
        MasterKey = Key;
        for (int i = 0; i < 10; i++)
        {
            RoundKeys[i] = new BYTE[16];
        }
        for (int i = 0; i < 16; i++)
        {
            RoundKeys[1][i] = Key[i];
            RoundKeys[0][i] = Key[i + 16];
        }
        K1 = RoundKeys[0];
        K2 = RoundKeys[1];

        for (int i = 0; i < 4; i++)
        {
            for (int j = 0; j < 8; j++)
            {
                IterConst(8 * i + j + 1);
            }
            RoundKeys[2 * i + 2] = K1;
            RoundKeys[2 * i + 3] = K2;
        }
    }

    BYTE* NextRoundKey()
    {
        it++;
        return RoundKeys[it];
    }

    BYTE* PrevRoundKey()
    {
        it--;
        return RoundKeys[it + 1];
    }

};

UINT8 SBox[256] = {
    0xFC, 0xEE, 0xDD, 0x11, 0xCF, 0x6E, 0x31, 0x16, 0xFB, 0xC4, 0xFA, 0xDA, 0x23, 0xC5, 0x04, 0x4D,
    0xE9, 0x77, 0xF0, 0xDB, 0x93, 0x2E, 0x99, 0xBA, 0x17, 0x36, 0xF1, 0xBB, 0x14, 0xCD, 0x5F, 0xC1,
    0xF9, 0x18, 0x65, 0x5A, 0xE2, 0x5C, 0xEF, 0x21, 0x81, 0x1C, 0x3C, 0x42, 0x8B, 0x01, 0x8E, 0x4F,
    0x05, 0x84, 0x02, 0xAE, 0xE3, 0x6A, 0x8F, 0xA0, 0x06, 0x0B, 0xED, 0x98, 0x7F, 0xD4, 0xD3, 0x1F,
    0xEB, 0x34, 0x2C, 0x51, 0xEA, 0xC8, 0x48, 0xAB, 0xF2, 0x2A, 0x68, 0xA2, 0xFD, 0x3A, 0xCE, 0xCC,
    0xB5, 0x70, 0x0E, 0x56, 0x08, 0x0C, 0x76, 0x12, 0xBF, 0x72, 0x13, 0x47, 0x9C, 0xB7, 0x5D, 0x87,
    0x15, 0xA1, 0x96, 0x29, 0x10, 0x7B, 0x9A, 0xC7, 0xF3, 0x91, 0x78, 0x6F, 0x9D, 0x9E, 0xB2, 0xB1,
    0x32, 0x75, 0x19, 0x3D, 0xFF, 0x35, 0x8A, 0x7E, 0x6D, 0x54, 0xC6, 0x80, 0xC3, 0xBD, 0x0D, 0x57,
    0xDF, 0xF5, 0x24, 0xA9, 0x3E, 0xA8, 0x43, 0xC9, 0xD7, 0x79, 0xD6, 0xF6, 0x7C, 0x22, 0xB9, 0x03,
    0xE0, 0x0F, 0xEC, 0xDE, 0x7A, 0x94, 0xB0, 0xBC, 0xDC, 0xE8, 0x28, 0x50, 0x4E, 0x33, 0x0A, 0x4A,
    0xA7, 0x97, 0x60, 0x73, 0x1E, 0x00, 0x62, 0x44, 0x1A, 0xB8, 0x38, 0x82, 0x64, 0x9F, 0x26, 0x41,
    0xAD, 0x45, 0x46, 0x92, 0x27, 0x5E, 0x55, 0x2F, 0x8C, 0xA3, 0xA5, 0x7D, 0x69, 0xD5, 0x95, 0x3B,
    0x07, 0x58, 0xB3, 0x40, 0x86, 0xAC, 0x1D, 0xF7, 0x30, 0x37, 0x6B, 0xE4, 0x88, 0xD9, 0xE7, 0x89,
    0xE1, 0x1B, 0x83, 0x49, 0x4C, 0x3F, 0xF8, 0xFE, 0x8D, 0x53, 0xAA, 0x90, 0xCA, 0xD8, 0x85, 0x61,
    0x20, 0x71, 0x67, 0xA4, 0x2D, 0x2B, 0x09, 0x5B, 0xCB, 0x9B, 0x25, 0xD0, 0xBE, 0xE5, 0x6C, 0x52,
    0x59, 0xA6, 0x74, 0xD2, 0xE6, 0xF4, 0xB4, 0xC0, 0xD1, 0x66, 0xAF, 0xC2, 0x39, 0x4B, 0x63, 0xB6
};

UINT8 InvSBox[256] = {
    0xA5, 0x2D, 0x32, 0x8F, 0x0E, 0x30, 0x38, 0xC0, 0x54, 0xE6, 0x9E, 0x39, 0x55, 0x7E, 0x52, 0x91,
    0x64, 0x03, 0x57, 0x5A, 0x1C, 0x60, 0x07, 0x18, 0x21, 0x72, 0xA8, 0xD1, 0x29, 0xC6, 0xA4, 0x3F,
    0xE0, 0x27, 0x8D, 0x0C, 0x82, 0xEA, 0xAE, 0xB4, 0x9A, 0x63, 0x49, 0xE5, 0x42, 0xE4, 0x15, 0xB7,
    0xC8, 0x06, 0x70, 0x9D, 0x41, 0x75, 0x19, 0xC9, 0xAA, 0xFC, 0x4D, 0xBF, 0x2A, 0x73, 0x84, 0xD5,
    0xC3, 0xAF, 0x2B, 0x86, 0xA7, 0xB1, 0xB2, 0x5B, 0x46, 0xD3, 0x9F, 0xFD, 0xD4, 0x0F, 0x9C, 0x2F,
    0x9B, 0x43, 0xEF, 0xD9, 0x79, 0xB6, 0x53, 0x7F, 0xC1, 0xF0, 0x23, 0xE7, 0x25, 0x5E, 0xB5, 0x1E,
    0xA2, 0xDF, 0xA6, 0xFE, 0xAC, 0x22, 0xF9, 0xE2, 0x4A, 0xBC, 0x35, 0xCA, 0xEE, 0x78, 0x05, 0x6B,
    0x51, 0xE1, 0x59, 0xA3, 0xF2, 0x71, 0x56, 0x11, 0x6A, 0x89, 0x94, 0x65, 0x8C, 0xBB, 0x77, 0x3C,
    0x7B, 0x28, 0xAB, 0xD2, 0x31, 0xDE, 0xC4, 0x5F, 0xCC, 0xCF, 0x76, 0x2C, 0xB8, 0xD8, 0x2E, 0x36,
    0xDB, 0x69, 0xB3, 0x14, 0x95, 0xBE, 0x62, 0xA1, 0x3B, 0x16, 0x66, 0xE9, 0x5C, 0x6C, 0x6D, 0xAD,
    0x37, 0x61, 0x4B, 0xB9, 0xE3, 0xBA, 0xF1, 0xA0, 0x85, 0x83, 0xDA, 0x47, 0xC5, 0xB0, 0x33, 0xFA,
    0x96, 0x6F, 0x6E, 0xC2, 0xF6, 0x50, 0xFF, 0x5D, 0xA9, 0x8E, 0x17, 0x1B, 0x97, 0x7D, 0xEC, 0x58,
    0xF7, 0x1F, 0xFB, 0x7C, 0x09, 0x0D, 0x7A, 0x67, 0x45, 0x87, 0xDC, 0xE8, 0x4F, 0x1D, 0x4E, 0x04,
    0xEB, 0xF8, 0xF3, 0x3E, 0x3D, 0xBD, 0x8A, 0x88, 0xDD, 0xCD, 0x0B, 0x13, 0x98, 0x02, 0x93, 0x80,
    0x90, 0xD0, 0x24, 0x34, 0xCB, 0xED, 0xF4, 0xCE, 0x99, 0x10, 0x44, 0x40, 0x92, 0x3A, 0x01, 0x26,
    0x12, 0x1A, 0x48, 0x68, 0xF5, 0x81, 0x8B, 0xC7, 0xD6, 0x20, 0x0A, 0x08, 0x00, 0x4C, 0xD7, 0x74
};

UINT8 KoefBox[16] = {
    0x01, 0x94, 0x20, 0x85, 0x10, 0xC2, 0xC0, 0x01, 0xFB, 0x01, 0xC0, 0xC2, 0x10, 0x85, 0x20, 0x94
};

BYTE* STransparent(BYTE* data)
{
    BYTE* res = new BYTE[16];
    for (UINT8 i = 0; i < 16; i++)
    {
        res[i] = SBox[data[i]];
    }
    return res;
}

BYTE* InvSTransparent(BYTE* data)
{
    BYTE* res = new BYTE[16];
    for (UINT8 i = 0; i < 16; i++)
    {
        res[i] = InvSBox[data[i]];
    }
    return res;
}

BYTE* XOR(BYTE* A, BYTE* B, UINT8 sz)
{
    BYTE* res = new BYTE[sz];
    for (UINT8 i = 0; i < sz; i++)
    {
        res[i] = A[i] ^ B[i];
    }
    return res;
}

BYTE GaluaMultiplex(BYTE A, BYTE B)
{
    BYTE C = 0;
    BYTE Hidh;
    for (UINT8 i = 0; i < 8; i++)
    {
        if (B & 0x01)
        {
            C ^= A;
        }
        B >>= 1;
        Hidh = A & 0x80;
        A <<= 1;
        if (Hidh)
        {
            A ^= 0xC3;
        }
    }
    return C;
}

BYTE* RTransparent(BYTE* data)
{
    BYTE* res = new BYTE[16];
    res[15] = 0;
    for (INT8 i = 15; i >=0; i--)
    {
        res[15] ^= GaluaMultiplex(data[i], KoefBox[i]);
    }
    for (int i = 15; i >= 1; i--)
    {
        res[i - 1] = data[i];
    }
    return res;
}

BYTE* LTransparent(BYTE* data)
{
    BYTE* res = new BYTE[16];
    res = data;
    for (UINT8 i = 0; i < 16; i++)
    {
        res = RTransparent(res);
    }
    return res;
}

BYTE* InvRTransparent(BYTE* data)
{
    BYTE* res = new BYTE[16];
    res[0] = data[15];
    for (UINT8 i = 0; i < 16; i++)
    {
        if (i != 0)
        {
            res[i] = data[i - 1];
            res[0] ^= GaluaMultiplex(res[i], KoefBox[i]);
        }
    }
    return res;
}

BYTE* InvLTransparent(BYTE* data)
{
    BYTE* res = new BYTE[16];
    res = data;
    for (UINT8 i = 0; i < 16; i++)
    {
        res = InvRTransparent(res);
    }
    return res;
}

bool IsEqual(BYTE* A, BYTE* B, UINT16 sz)
{
    for (UINT16 i = 0; i < sz; i++)
    {
        if (A[i] != B[i]) return false;
    }
    return true;
}

void Print(BYTE* data, UINT8 sz)
{
    for (int i = sz - 1; i >= 0; i--)
    {
        printf("%02x", data[i]);
    }
    cout << endl;
}

BYTE* GenKey(UINT64 a, UINT64 b, UINT64 c, UINT64 d)
{
    BYTE* res = new BYTE[32];

    for (int i = 0; i < 8; i++)
    {
        BYTE btA = (BYTE)a;
        res[24 + i] = btA;
        a >>= 8;

        BYTE btB = (BYTE)b;
        res[16 + i] = btB;
        b >>= 8;

        BYTE btC = (BYTE)c;
        res[8 + i] = btC;
        c >>= 8;

        BYTE btD = (BYTE)d;
        res[i] = btD;
        d >>= 8;
    }

    return res;
}

int main()
{
    srand(time(0));
    BYTE* Key = new BYTE[32];
    BYTE* OpenText = new BYTE[16];
    BYTE* DATA;
    for (int i = 0; i < 16; i++)
    {
        Key[2 * i] = rand() % 256;
        Key[2 * i + 1] = rand() % 256;
        OpenText[i] = rand() % 256;
    }

    //Key = GenKey(0x8899aabbccddeeff, 0x0011223344556677, 0xfedcba9876543210, 0x0123456789abcdef);
    cout << "Key:" << endl;
    Print(Key, 32);

    KuznechikKey KeyGen = KuznechikKey(Key);
    BYTE* RoundKey = KeyGen.NextRoundKey();

    cout << "OpenText:" << endl;
    Print(OpenText, 16);

    cout << endl << "Encryption: " << endl << endl;

    cout << "XOR with key:" << endl;
    DATA = XOR(OpenText, RoundKey, 16);
    Print(DATA, 16);

    for (int i = 0; i < 9; i++)
    {
        cout << "S transparent:" << endl;
        DATA = STransparent(DATA);
        Print(DATA, 16);

        DATA = LTransparent(DATA);
        cout << "L transparent:" << endl;
        Print(DATA, 16);

        RoundKey = KeyGen.NextRoundKey();

        cout << "XOR with key:" << endl;
        DATA = XOR(DATA, RoundKey, 16);
        Print(DATA, 16);
    }

    BYTE* ClosedText = DATA;
    cout << "Closed Text:" << endl;
    Print(ClosedText, 16);

    cout << endl << "Decryption: " << endl << endl;

    RoundKey = KeyGen.PrevRoundKey();

    cout << "XOR with key:" << endl;
    DATA = XOR(ClosedText, RoundKey, 16);
    Print(DATA, 16);

    for (int i = 0; i < 9; i++)
    {
        DATA = InvLTransparent(DATA);
        cout << "Inversion L transparent:" << endl;
        Print(DATA, 16);

        DATA = InvSTransparent(DATA);
        cout << "Inversion S transparent:" << endl;
        Print(DATA, 16);

        RoundKey = KeyGen.PrevRoundKey();

        cout << "XOR with key:" << endl;
        DATA = XOR(DATA, RoundKey, 16);
        Print(DATA, 16);
    }

    if (IsEqual(OpenText, DATA, 16)) cout << "Success!\n";
    else cout << "Failed!\n";
}